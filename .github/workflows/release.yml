# .github/workflows/release.yml
# 工作流名称
name: 构建与发布

# 工作流触发条件
on:
  # 当有代码推送到 simple 分支时触发
  push:
    branches:
      - simple
  # 同样允许手动触发
  workflow_dispatch:

# 定义任务
jobs:
  # 定义一个构建任务
  build-and-release:
    # 任务名称
    name: 构建并创建预发布版本
    # 运行环境
    runs-on: ubuntu-latest
    # 任务步骤
    steps:
      # 步骤 1: 拉取代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 拉取所有 git 历史，以便获取 commit hash
          fetch-depth: 0

      # 步骤 2: 代码语法检查
      - name: 使用 shellcheck 检查脚本
        run: shellcheck box_service.sh customize.sh

      # 步骤 3: 准备版本信息
      - name: 生成版本号和构建信息
        id: versioning
        run: |
          # 从 module.prop 获取 sing-box 核心版本号
          CORE_VERSION=$(grep 'version=' module.prop | cut -d'=' -f2 | cut -d'+' -f1)
          # 获取短的 git commit hash (前7位)
          GIT_HASH=$(git rev-parse --short HEAD)
          # 组合成最终的版本号
          FINAL_VERSION="${CORE_VERSION}+${GIT_HASH}"
          # 将版本号设置为环境变量，供后续步骤使用
          echo "version=$FINAL_VERSION" >> $GITHUB_ENV
          # 将版本号设置为输出变量，供其他地方引用
          echo "tag=$FINAL_VERSION" >> $GITHUB_OUTPUT
          # 定义打包后的文件名
          echo "file_name=Box_for_Magisk-simple-${FINAL_VERSION}.zip" >> $GITHUB_ENV

      # 步骤 4: 更新模块配置文件中的版本号
      - name: 更新 module.prop 文件
        run: |
          # 使用 sed 命令将 module.prop 文件中的 version=xxxx 这一行替换为我们新生成的版本号
          sed -i "s/^version=.*/version=${{ env.version }}/" module.prop

      # 步骤 5: 打包模块
      - name: 执行打包脚本
        run: |
          # 创建一个临时目录用于打包
          mkdir -p release
          # 将所有模块文件复制到临时目录
          cp -r META-INF/ box/ customize.sh module.prop action.sh box_service.sh uninstall.sh release/
          # 进入临时目录
          cd release
          # 使用 zip 命令打包所有文件
          # -r 表示递归打包子目录
          # -9 表示最高压缩率
          # -q 表示静默模式，不输出打包过程
          zip -r9q ../${{ env.file_name }} .
          # 返回上级目录
          cd ..

      # 步骤 6: 创建或更新 GitHub Release
      - name: 创建预发布 (Pre-release)
        uses: softprops/action-gh-release@v1
        with:
          # 指定要发布的文件的路径
          files: ${{ env.file_name }}
          # 指定 release 的标签名，使用我们生成的版本号
          tag_name: ${{ steps.versioning.outputs.tag }}
          # 将此 release 标记为预发布版本
          prerelease: true
          # 如果同名 tag 的 release 已存在，则覆盖更新它
          # 这对于滚动更新的 simple 分支非常重要
          # 它会确保始终只有一个最新的预发布版本
          # 避免了 release 列表的混乱
          # 注意：旧的 release 会被删除，只保留最新的
          # 如果想保留历史，可以把下面这行注释掉
          # delete_if_exists: true