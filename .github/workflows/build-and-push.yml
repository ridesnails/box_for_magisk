name: Build and Push to Telegram

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      core:
        description: '代理核心选择'
        required: false
        default: 'sing-box'
        type: choice
        options:
          - sing-box
          - clash
          - xray
          - v2fly
          - hysteria
      network_mode:
        description: '网络模式'
        required: false
        default: 'enhance'
        type: choice
        options:
          - enhance
          - tproxy
          - redirect
          - mixed
          - tun
      ui:
        description: 'UI 界面'
        required: false
        default: 'zashboard'
        type: choice
        options:
          - zashboard
          - yacd
          - metacubexd
      skip_telegram:
        description: '跳过 Telegram 推送'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl unzip zip python3 python3-pip
        pip3 install requests

    - name: Set build parameters
      id: params
      run: |
        # 设置默认参数
        CORE="${{ github.event.inputs.core || 'sing-box' }}"
        NETWORK_MODE="${{ github.event.inputs.network_mode || 'enhance' }}"
        UI="${{ github.event.inputs.ui || 'zashboard' }}"
        SKIP_TELEGRAM="${{ github.event.inputs.skip_telegram || 'false' }}"
        
        echo "core=$CORE" >> $GITHUB_OUTPUT
        echo "network_mode=$NETWORK_MODE" >> $GITHUB_OUTPUT
        echo "ui=$UI" >> $GITHUB_OUTPUT
        echo "skip_telegram=$SKIP_TELEGRAM" >> $GITHUB_OUTPUT
        
        # 设置版本信息
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # 设置构建信息
        echo "build_date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Update module.prop
      run: |
        # 更新版本信息
        sed -i "s/^version=.*/version=${{ steps.params.outputs.version }}/" module.prop
        sed -i "s/^versionCode=.*/versionCode=${{ steps.params.outputs.build_date }}/" module.prop
        
        # 显示更新后的信息
        echo "Updated module.prop:"
        cat module.prop

    - name: Configure workflow
      run: |
        # 设置脚本权限
        chmod +x workflow_generator.sh
        
        # 创建必要的目录
        mkdir -p build
        
        echo "Build configuration:"
        echo "  Core: ${{ steps.params.outputs.core }}"
        echo "  Network Mode: ${{ steps.params.outputs.network_mode }}"
        echo "  UI: ${{ steps.params.outputs.ui }}"
        echo "  Version: ${{ steps.params.outputs.version }}"

    - name: Build module package
      run: |
        # 运行工作流生成器
        ./workflow_generator.sh \
          --core "${{ steps.params.outputs.core }}" \
          --mode "${{ steps.params.outputs.network_mode }}" \
          --ui "${{ steps.params.outputs.ui }}" \
          --build-only
        
        # 检查生成的文件
        ls -la build/
        
        # 重命名文件包含配置信息
        cd build
        for file in *.zip; do
          if [ -f "$file" ]; then
            new_name="box_for_root-${{ steps.params.outputs.version }}-${{ steps.params.outputs.core }}-${{ steps.params.outputs.network_mode }}.zip"
            mv "$file" "$new_name"
            echo "Generated: $new_name"
            echo "module_file=$new_name" >> $GITHUB_ENV
          fi
        done

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # Box for Magisk ${{ steps.params.outputs.version }}
        
        ## 📦 构建信息
        - **版本**: ${{ steps.params.outputs.version }}
        - **构建日期**: $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **提交**: ${{ steps.params.outputs.commit_sha }}
        
        ## ⚙️ 配置信息
        - **代理核心**: ${{ steps.params.outputs.core }}
        - **网络模式**: ${{ steps.params.outputs.network_mode }}
        - **UI 界面**: ${{ steps.params.outputs.ui }}
        
        ## 🚀 默认配置
        - **透明代理**: 黑名单模式
        - **IPv6**: 已禁用
        - **端口配置**: tproxy 9898, redirect 9797
        
        ## 📱 安装方法
        1. 下载模块包
        2. 通过 Magisk/KernelSU/APatch Manager 安装
        3. 重启设备
        4. 访问控制面板: http://127.0.0.1:9090/ui/
        
        ## 🔗 相关链接
        - [GitHub Repository](https://github.com/taamarin/box_for_magisk)
        - [使用文档](https://github.com/taamarin/box_for_magisk/blob/master/README.md)
        - [问题反馈](https://t.me/taamarin)
        
        #BoxForRoot #Magisk #KernelSU #APatch #${{ steps.params.outputs.core }}
        EOF
        
        # 输出发布说明
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.params.outputs.version }}
        name: "Box for Magisk ${{ steps.params.outputs.version }}"
        body_path: release_notes.md
        files: build/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: box-for-magisk-${{ steps.params.outputs.version }}
        path: build/*.zip
        retention-days: 30

    - name: Push to Telegram Bot
      if: steps.params.outputs.skip_telegram != 'true' && (secrets.BOT_TOKEN != '' && secrets.CHAT_ID != '')
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT_ID }}
        VERSION: ${{ steps.params.outputs.version }}
      run: |
        echo "📱 推送到 Telegram Bot..."

        # 设置提交信息
        export COMMIT="$(git log --oneline -n 5 --no-decorate | sed 's/^[0-9a-f]* //' | sed 's/^/— /')"

        # 查找模块文件
        MODULE_FILE=$(find build -name "*.zip" | head -1)

        if [ -f "$MODULE_FILE" ]; then
          echo "📦 找到模块文件: $MODULE_FILE"

          # 使用新的推送脚本
          if [ -f ".github/telegram_push.py" ]; then
            python3 .github/telegram_push.py "$MODULE_FILE"
            echo "✅ 成功推送到 Telegram"
          elif [ -f ".github/taamarinbot.py" ]; then
            # 备用：使用原有脚本
            python3 .github/taamarinbot.py "$MODULE_FILE"
            echo "✅ 成功推送到 Telegram (使用备用脚本)"
          else
            echo "❌ 未找到 Telegram 推送脚本"
            exit 1
          fi
        else
          echo "❌ 未找到模块文件"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        # 清理临时文件
        rm -rf /tmp/box_workflow* || true
        echo "✅ 清理完成"

    - name: Build Summary
      if: always()
      run: |
        echo "## 🎯 构建摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| 版本 | ${{ steps.params.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 核心 | ${{ steps.params.outputs.core }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 网络模式 | ${{ steps.params.outputs.network_mode }} |" >> $GITHUB_STEP_SUMMARY
        echo "| UI | ${{ steps.params.outputs.ui }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 构建状态 | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "build/*.zip" ]; then
          echo "### 📦 生成的文件" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la build/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
